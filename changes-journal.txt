1.  change all ca:isTargetof  to ca:isTargetOf
2.  change all bioj:(\d) to bioj:a$1

bioj:2007-48-UNDERSEA_HYPERBAR_M
bioj:2008-02-WATERBIRDS

bioj:a2007-48-UNDERSEA_HYPERBAR_M
bioj:a2008-02-WATERBIRDS

sed 's/bioj:\([[:digit:]]\)/bioj:a\1/g'

3.  Standardize  ontology location to http://james.howison.name/ontologies/.  This means changing http://howison.ischool.utexas.edu/

4.  Fix dc:isPartOf so that the ISSN is urn:ISSN:number not dc:number

dc:urn dc:1896-1851 ;

dc:urn <urn:issn:1896-1851> ;

sed 's/dc:\([[:digit:]][[:digit:]][[:digit:]][[:digit:]]-[[:digit:]][[:digit:]][[:digit:]][[:digit:]]\)/<urn:issn:\1>/g'

also change dc:urn to dc:identifier

sed 's/dc:urn/dc:identifier/g'

cleanup one or two (wish I'd included the X!):

sed 's/dc:ISSN1744-4292/<urn:issn:1744-4292>/g'

sed 's/dc:1365-313X/<urn:issn:1365-313X>/g'

sed 's/dc:1076-836X/<urn:issn:1076-836X>/g'

sed 's/dc:1303-829X/<urn:issn:1303-829X>/g'

sed 's/dc:1618-095X/<urn:issn:1618-095X>/g'
sed 's/dc:1365-294X/<urn:issn:1365-294X>/g'
dc:


---------------
Wed Feb 12 17:32:24 CST 2014
---------------


Then I deleted everything and re-imported:

CatherineCoding-singly_coded_AS_OF_01-22-13.ttl (md5: ccd8ccc2ec799d8466d7855d4141a9d0)
Julia-singlyCoded.ttl (md5: 23c789d8625f791dd68b61531c91ddeb)
journalCodes.ttl (md5: 105a323084a050c0266e75720eb65d0f)

Hmmmm, that gives 398 selections, not the 404 that I found before...ug.

60 articles with selections:

SELECT (COUNT(DISTINCT ?article) as ?articles_with_selection)
WHERE {
	?article rdf:type bioj:article ;
	         bioj:has_selection ?sel .
}

---------------
Wed Feb 12 17:39:40 CST 2014
---------------


SELECT ?strata (COUNT(DISTINCT ?article) as ?articles_with_selection)
WHERE {
      ?article rdf:type bioj:article ;
                  dc:isPartOf ?journal ;
	         bioj:has_selection ?sel .
      ?journal bioj:strata ?strata .
}
GROUP BY ?strata
ORDER BY ?strata

hmmmm, nothing under bioj:strata.  Damn, forgot to update the journalCodes.ttl stuff with the http://james.howison.name/ontologies/.

Delete everything and report.

CatherineCoding-singly_coded_AS_OF_01-22-13.ttl (md5: ccd8ccc2ec799d8466d7855d4141a9d0)
Julia-singlyCoded.ttl (md5: 23c789d8625f791dd68b61531c91ddeb)
journalCodes.ttl (md5: e10d0c07c0bd3433ce846817234bee70)

---------------
Wed Feb 12 17:54:18 CST 2014
---------------

Hmmm, seem to be 3 journals without strata?

These appear to be differently spelled in the isPartOf and the rdf:tupe bioj:journal statements.

http://james.howison.name/ontologies/bio-journal-sample#J_INTEGR-PLANT-BIOL
http://james.howison.name/ontologies/bio-journal-sample#J_INTEGR_PLANT_BIOL

and 

NAT-GENET (one dc:isPartOf) vs NAT_GENET (dc:isPartOf and rdf:type bioj:journal)

http://james.howison.name/ontologies/bio-journal-sample#J_THERM_BIOL

was just never coded for strata?

Hmmmm, there really isn't a consistent coding of - vs _ in journal name URIs.

Ok: actual changes:

sed 's/NAT-GENET/NAT_GENET/g'

sed 's/INTEGR-PLANT-BIOL/INTEGR_PLANT_BIOL/g'  # Note this changes a bunch of selections too.

Post these changes import:
MD5 (CatherineCoding-singly_coded_AS_OF_01-22-13.ttl) = a55483c3a6c246d7f0c936ff0cda041e
MD5 (journalCodes.ttl) = e10d0c07c0bd3433ce846817234bee70
MD5 (JuliaCoding-singlyCoded.ttl) = 67dac9287dc23b2d0b3230536e88e0c5

---------------
Thu Feb 13 09:36:40 CST 2014
---------------

Hmmm, J_THERM_BIOL.  I think this was a replacement for an article, perhaps a review article?

---------------
Wed Feb 26 09:57:57 CST 2014
---------------

Ok, selections.

	?sel rdf:type bioj:selection  shows 398
	
	?article citec:has_selection ?sel shows 285.
	
Why?

UNION of those two has 401 DISTINCT URLs.

Want ?sel where not bioj:selection.  Do this with a FILTER.  Found 3 URL typo issues. see commits: 508b603219d5cf10781fced4f8fdfd2c45e0049b and 47c207f0e0bd4426970a0ebd4a3de5ca34c5e6ac

---------------
Thu Feb 27 09:21:25 CST 2014
---------------

Articles have selections, some of those selections have_references.  The Reference receives codes, so it is a selection as well.

SELECT COUNT(DISTINCT ?sel) 
WHERE {
  ?article bioj:has_selection ?sel .
  ?sel bioj:has_reference ?ref .
  ?ref rdf:type bioj:selection . 
}
==> 126.
There are 126 has_reference statements?

The solution here might be to directly associate the has_reference with the articles.  Should make them easier to consider?  Going to depend a little on the specific questions, though.

SELECT (COUNT(DISTINCT ?sel) as ?selectionCount)
WHERE {
    ?sel rdf:type bioj:selection 
  	FILTER NOT EXISTS {
		   ?article bioj:has_selection ?sel
		}
}
==> 114
There are 114 bioj:selections not directly associated with an article?

So there are 126 - 114 has_reference statements that are directly associated?

Nope, all Domains of bioj:has_reference are bioj:selections.

hmmm.

SELECT COUNT(DISTINCT ?ref)
WHERE {
  [] bioj:has_reference ?ref .
}
==> 112.  references.
bah.

SELECT COUNT(DISTINCT ?direct_sel) 
WHERE {
  ?article bioj:has_selection ?direct_sel ;
           rdf:type bioj:article .
  ?direct_sel bioj:has_reference ?ref .
  ?ref rdf:type bioj:selection . 
}
126 selections with references.

Ok, that's easy, some references occur in more than one selection.

Q: how many direct selections have references? A: 126.
Q: how many references occur in more than one selection?

SELECT COUNT(DISTINCT ?ref)
WHERE {
  ?sel1 bioj:has_reference ?ref .
  ?sel2 bioj:has_reference ?ref .
  FILTER (?sel1 != ?sel2 )
}

Yup.  That gives 22. Which is the difference between 126 and 114.

---------------
Thu Feb 27 09:50:11 CST 2014
---------------

Ok, confirming vocabulary extent and possibility of typos.

Get all things used as a property.

SELECT DISTINCT ?p
WHERE {
 [] ?p []
}
ORDER BY ?p

Then visually inspect for near typos.

e.g.,

ca:isTargetof instead of ca:isTargetOf

bioj:full_quote / bioj:fullquote

Also notice lack of consistentcy between underscore_separated and studlyCaps.

Made the two changes above.

---------------
Thu Feb 27 10:05:04 CST 2014
---------------

SELECT DISTINCT (strafter(str(?p), "#") as ?localName)
WHERE {
 [] ?p []
}
ORDER BY ?localName

SELECT DISTINCT ?s
WHERE {
 ?s ?p ?o
}
ORDER BY ?s

but I only want those that match a namespace?
Can cut this down with regex.

found

citec:domain-publication
citec:domain_publication

replaced 2.

found

software_pubication

replaced 1.

---------------
Thu Feb 27 10:28:37 CST 2014
---------------

bioj:J_MOL_CATAL_B-ENZYM rdf:type bioj:journal ;
	dc:identifier <urn:issn:1873-3158> ;
	dc:title "Journal of Molecular Catalysis B: Enzymatic" ;
	bioj:strata "111-1455" ;
	bioj:hasAuthorInstructions "http://www.elsevier.com/journals/journal-of-molecular-catalysis-b-enzymatic/1381-1177/guide-for-authors" ;
	bioj:hasSoftwarePolicy "text" ;
	bioj:hasSoftwarePolicy "url" ;
.

Doesn't look quite right.  Are the bottom two just left-over templates and you meant that that policy doesn't have any Software Policy?

Found

urlhttp://www.biomedcentral.com/bmcplantbiol/authors/instructions

removed the url part of it.

---------------
Thu Feb 27 10:31:02 CST 2014
---------------

Email back from Julia 

Yeah, that's exactly what that is. I just checked it against the notes I had in Excel for each journal and both those fields are blank.


On Thu, Feb 27, 2014 at 10:33 AM, James Howison <jhowison@ischool.utexas.edu> wrote:
bioj:J_MOL_CATAL_B-ENZYM rdf:type bioj:journal ;
        dc:identifier <urn:issn:1873-3158> ;
        dc:title "Journal of Molecular Catalysis B: Enzymatic" ;
        bioj:strata "111-1455" ;
        bioj:hasAuthorInstructions "http://www.elsevier.com/journals/journal-of-molecular-catalysis-b-enzymatic/1381-1177/guide-for-authors" ;
        bioj:hasSoftwarePolicy "text" ;
        bioj:hasSoftwarePolicy "url" ;
.

Doesn't look quite right.  Are the bottom two just left-over templates and you meant that that policy doesn't include any Software Policy?

Thanks,
James

---------------
Fri Mar  7 22:22:28 MST 2014
---------------

What are queries that actually matter?

What proportion of articles had software mentions?

What is the count of software mentions per article?
Output so that they can be graphed with ggplot2.

---------------
Fri Mar  7 22:27:47 MST 2014
---------------

Note: what do I need to do to move the reference selections from being associated with their in-text location to being directly associated with the articles?

bioj:a2002-39-SYST_BOT-B04 rdf:type bioj:selection ;
	bioj:full_quote "All phylogenies were inferred using the program PAUP* version 4.0b6 (Swofford 2001). Bootstrap analyses based on 1,000 replicates were performed to explore the robustness of the trees. The following options were used for all analyses: parsimony, branch and bound search, stepwise furthest addition sequence, collapse zero-length branches." ;
	bioj:has_reference bioj-cited:Swofford-2001 ;
.

bioj-cited:Swofford-2001 rdf:type bioj:selection ;
	ca:memo "Paup* is available from Sinaeur Associate's online catalogue." ;

	bioj:full_quote "SWOFFORD, D. 2001. PAUP*: Phylogenetic Analysis Using Parsimony, vers.4.0b6. Sunderland, Massachusetts: Sinauer Associates, Inc. Publishers." ;
	
	ca:isTargetOf 
	[ rdf:type ca:CodeApplication ;
	  ca:hasCoder "jbullard" ;
	  ca:appliesCode citec:project_name ;
	] ;

.

if 

?article bioj:has_selection ?sel .
?sel bioj:has_reference ?ref .

then

?article bioj:has_selection ?sel .

no, that doesn't put the codes on the original selection ... which is really the mention.

if 
?article bioj:has_selection ?sel .
?sel bioj:has_reference ?ref .
?ref ca:isTargetOf ?code .

then
?sel ca:isTargetOf ?code .


or, without adding additional statements:

when querying for ?code use

?article bioj:has_selection ?sel .
?sel ca:isTargetOf ?code .
OPTIONAL {
  ?sel bioj:has_reference ?ref .
  ?ref ca:isTargetOf ?code .
}

select * where 
{
	bioj:a2002-39-SYST_BOT bioj:has_selection ?sel .
	?sel ca:isTargetOf [ ca:appliesCode [ rdf:type ?code ] ] .
	OPTIONAL {
  		?sel bioj:has_reference ?ref .
  		?ref ca:isTargetOf [ ca:appliesCode [ rdf:type ?code ] ] .
	}
}


---------------
Mon Mar 10 09:16:58 CDT 2014
---------------


hmm, trouble querying between:

ca:isTargetOf 
[ rdf:type ca:CodeApplication ;
  ca:hasCoder "jbullard" ;
  ca:appliesCode citec:software_used ;
] ;

And
 
ca:isTargetOf 
[ rdf:type ca:CodeApplication ;
  ca:hasCoder "jbullard" ;
  ca:appliesCode [ rdf:type citec:software_name ;
  				   rdfs:label "PAUP*" ] ;
] ;


ca:appliesCode citec:software_used ;  is a code, with a known URL, code name encoded in URL
ca:appliesCode [ rdf:type citec:software_name ;
				   rdfs:label "PAUP*" ] ; is also a code, with an anon URL, code name encoded in type statement for anon node.
				
For consistency, could change all 
ca:appliesCode citec:software_used ;

to 
  ca:appliesCode [ rdf:type citec:software_used ];

Then one has this hierarchy:

citec:software_used rdf:type citec:code .
citec:software_name rdf:type citec:code .

Such that the specific code applied is an anon instance of that code, allowing the addition of memos and labels carrying specific info (e.g., name of the software, version number etc.)

Ask the intuitive question: what type of a code is this? ==> software_name

Would need to:

sed 's/citec:software_used/[ rdf:type citec:software_used ]/g'

query for 
?s ca:appliesCode ?code
FILTER NOT EXISTS {
  ?code rdfs:label ?label
}

---------------
Mon Mar 10 09:32:53 CDT 2014
---------------
			
hmmmm, inconsistent prefixes:

http://james.howison.name/ontologies/citation-codes#in-text_mention

citec http://james.howison.name/ontologies/citation-codes

http://james.howison.name/ontologies/software-citation-coding#in-text_mention

Fixed in https://github.com/jameshowison/softcite/commit/574a264fd9e9a73bb8548fa44fb5d996e24817af

---------------
Mon Mar 10 09:34:36 CDT 2014
---------------

Back to making the citec codes consistent.  Would need to change:

citec:in-text_mention
citec:software_used
citec:identifiable
citec:findable
citec:unfindable_version
citec:access_free
citec:source_unavailable
citec:prohibited_modify
citec:matchesPreferredCite
citec:domain_publication
citec:configuration_details
citec:unidentifiable
citec:unfindable
citec:source_available
citec:permission_modify
citec:software_publication
citec:no_access
citec:users_manual
citec:access_purchase
citec:project_name
citec:missesPreferredCite
citec:project_page
citec:software_not_used
citec:findable_version
citec:users_guide

Or:

ca:isTargetOf 
[ rdf:type ca:CodeApplication ;
  ca:hasCoder "jbullard" ;
  ca:appliesCode [ rdf:type citec:software_used ];
] ;

This seems to work:

sed 's/ca:appliesCode citec:\(.*\)[[:space:]]/ca:appliesCode [ rdf:type citec:\1 ]/g'

What test will help ensure things are not fucked up:

How many code applications:

SELECT COUNT?code
WHERE {
  ca:isTargetOf [ ca:appliesCode ?code ]
}

Also counting codeTypes

For direct-coded this is (ie unlabled)

?s ca:appliesCode ?codeType .
FILTER NOT EXISTS {
  ?codeType rdfs:label ?label
}

For indirect coded this is (ie labeled)

?s ca:appliesCode ?code .
?code rdf:type ?codeType
FILTER EXISTS {
  ?code rdfs:label ?label
}

Thus together:

{ 
?s ca:appliesCode ?codeType .
FILTER NOT EXISTS {
  ?codeType rdfs:label ?label
}
} UNION {
?s ca:appliesCode ?code .
?code rdf:type ?codeType
FILTER EXISTS {
  ?code rdfs:label ?label
}
} 

---------------
Mon Mar 10 10:26:11 CDT 2014
---------------

sed 's/^		\([	]*\)\(.*\)$/		queryStr.append(" \1\2 ");/g'

---------------
Wed Mar 12 10:03:37 CDT 2014
---------------

All articles with in-text_mentions:

select * where 
{
	?article bioj:has_selection ?sel .
	?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:in-text_mention ] ] .
	OPTIONAL {
  		?sel bioj:has_reference ?ref .
  		?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:in-text_mention ] ] .
	}
}

---------------
Mon Mar 17 08:12:58 CDT 2014
---------------

What are queries that actually matter?

What proportion of articles had software mentions?  By strata?  Get a ggplot2 plot of this?

What is the count of software mentions per article?
Output so that they can be graphed with ggplot2.

---------------
Thu Mar 20 08:59:47 CDT 2014
---------------

What is a general way to turn this from open world to closed world.  ie when I ask for software mentions I get (plyr style)

article, code, value
mentioned, citec:mention, true
unmentioned, citec:mention, false
software_name, citec:software_name, excel
no_name, citec:software_name, false

Could add a code (but that would need a selection?) rdfs:label for each of those that don't have it.

Could make the queries all UNION  or some kind of outer join by using OPTIONAL.

select * where 
{
	?article rdf:type bioj:article .
	OPTIONAL {
		?article bioj:has_selection ?sel .
		?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:in-text_mention ] ] .
	}
	OPTIONAL {
  		?sel bioj:has_reference ?ref .
  		?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:in-text_mention ] ] .
	}
}

Or could post-process the query against one that has default false

SELECT ?article WHERE
 { ?article rdf:type bioj:article }

then set the code to false for all.

articles$code <- "citec:mention"
articles$value <- false

then rest the code to true just for those that have that code

articles$value

apparently this has to do with the ?with command, or ifelse, but really it's a 

y <- with(DF, (Indoor - Outdoor >= 1) * 1)

---------------
Thu Mar 20 10:43:01 CDT 2014
---------------

New Strategy.  Use SWRL rules.


article(?a), has_selection(?a, ?sel), isTargetOf(?sel,?ca), appliesCode(?ca, ?code), in-text_mention(?code) -> ArticleWithMention(?a)

Article(?a), hasMention(?a, ?m) -> ArticleWithMention(?a)

---------------
Thu Mar 20 19:24:39 CDT 2014
---------------

Ok, new, new strategy, SPIN (or simply CONSTRUCT SPARQL queries).  Switching current changes into branch called nestedOptionals.

basically need to declare and store some spin:rules

http://spinrdf.org/spin.html#spin-rules

According to:

http://topbraid.org/examples/spinsquare.n3

What I need to do is to attach a spin:rule to a Class declaration.  That spin:rule then contains a CONSTRUCT sparql query.  Ideally I can store those in textual format.

Presumably when I then run an ontology model with inferencing the CONSTRUCT query is run.

So what CONSTRUCT query to run.

Want to infer that a bioj:article with at least one selection that has a code in-text_mention applied is a bioj:ArticleWithMention

CONSTRUCT {
  ?this rdf:type bioj:ArticleWithMention
} 
WHERE {
  ?this rdf:type bioj:article ;
        bioj:has_selection ?sel .
  ?sel  ca:isTargetOf [ ca:appliesCode [ rdf:type citec:in-text_mention ] ] .
  OPTIONAL { 
        ?sel bioj:has_reference ?ref .
        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type ?code ] ] .
  }
}

Ok!  That worked :)

---------------
Tue Mar 25 14:16:43 CDT 2014
---------------

Of

loveelsapo1