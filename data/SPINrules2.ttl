@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:     <http://www.w3.org/2002/07/owl#> .

@prefix ca: <http://floss.syr.edu/ontologies/2008/4/contentAnalysis.owl#> .
@prefix doap: <http://usefulinc.com/ns/doap#> .

@prefix bioj: <http://james.howison.name/ontologies/bio-journal-sample#> .
@prefix citec: <http://james.howison.name/ontologies/software-citation-coding#> .
@prefix bioj-cited: <http://james.howison.name/ontologies/bio-journal-sample-citation#> .

@prefix dc: <http://dublincore.org/documents/2012/06/14/dcmi-terms/> .

@prefix sp:      <http://spinrdf.org/sp#> .
@prefix spin:    <http://spinrdf.org/spin#> .
@prefix spl:     <http://spinrdf.org/spl#> .

<http://james.howison.name/ontologies/software-citation-coding-constraints>
  rdf:type owl:Ontology ;
  owl:imports <http://purl.org/dc/terms/> ;
  owl:imports <http://spinrdf.org/spl> .

# Create a class of rules that run first.
# This is needed to do a if not true then false clean up on is_credited.
bioj:runFirstRule rdfs:subPropertyOf spin:rule ;
                  spin:nextRuleProperty bioj:runSecondRule .
				  
bioj:runSecondRule rdfs:subPropertyOf spin:rule ;
                spin:nextRuleProperty spin:rule .				  

bioj:SoftwareMention a rdfs:Class ;

            bioj:runFirstRule [ rdf:type sp:Construct ;
			sp:text """
	# Try to find an existing SoftwarePackage (i.e. one from the Mapping File) (and used package)
	CONSTRUCT {
	  ?software_package bioj:mentioned_in ?this .
	  ?this bioj:mentions_software ?software_package ;
	}
	WHERE {
	  ?this  rdf:type bioj:SoftwareMention ;
	  		 citec:original_name ?name ;
			 citec:has_software_used true .
	  ?software_package rdf:type bioj:SoftwarePackage .
	  { ?software_package rdfs:label ?name }
	  UNION
	  { ?software_package citec:alternative_name ?name }
	}"""
] ;
            bioj:runSecondRule [ rdf:type sp:Construct ;
			sp:text """
	# Create software packages for each non-alternative (and used package)
	CONSTRUCT {
	  ?software_package a bioj:SoftwarePackage ;
	                    rdfs:label ?name ;
						bioj:mentioned_in ?this .
	  ?this bioj:mentions_software ?software_package ;

	}
	WHERE {
	  ?this  rdf:type bioj:SoftwareMention ;
	  		 citec:original_name ?name ;
			 citec:has_software_used true .
	  FILTER NOT EXISTS { ?this bioj:mentions_software ?software }
	  BIND (
		 URI(CONCAT("http://james.howison.name/ontologies/bio-journal-sample#software-",
		            ENCODE_FOR_URI(?name)
			       )
		    ) as ?software_package )
	}"""
] ;
            spin:rule [ rdf:type sp:Construct ;
			sp:text """
	# Create software packages for each package without a name
	CONSTRUCT {
	  ?software_package a bioj:SoftwarePackage ;
	                    rdfs:label ?unknown_name ;
						bioj:mentioned_in ?this .
	  ?this bioj:mentions_software ?software_package ;

	}
	WHERE {
	  ?this  rdf:type bioj:SoftwareMention ;
 	         citec:has_software_used true .
	  FILTER NOT EXISTS { ?this citec:original_name ?no_name . }
	  BIND (CONCAT("software-Unknown-",
	  		            strafter(str(?this),"#")
	  				) as ?unknown_name)
	  BIND (
	  		  URI(CONCAT("http://james.howison.name/ontologies/bio-journal-sample#",
	                 ENCODE_FOR_URI(?unknown_name)
	  				    )
	  			 ) as ?software_package )
	}"""
] ;
 


            spin:rule [ rdf:type sp:Construct ;
			sp:text """
	# Create ArticleSoftwareLinks but only for software that was used
	CONSTRUCT {
	  ?article_software_link rdf:type bioj:ArticleSoftwareLink ;
	  	        bioj:mentions_software ?software_package ;
				bioj:from_article ?article ;
				bioj:from_mention ?this .
	  ?this bioj:article_software_link ?article_software_link .
	}
	WHERE {
	  ?this  rdf:type bioj:SoftwareMention ;
			 bioj:mentions_software ?software_package ;
			 bioj:from_selection ?selection ;
			 citec:has_software_used true .
	  ?software_package rdfs:label ?name .
	  ?article bioj:has_selection ?selection .
	   	  BIND (
	   		 URI(CONCAT("http://james.howison.name/ontologies/bio-journal-sample#",
	   		            REPLACE(str(?article), '^.*(#|/)', ""),
						"-",
						ENCODE_FOR_URI(?name)
	   			       )
	   		    ) as ?article_software_link )
	}"""
] ;

.

bioj:ArticleSoftwareLink a rdfs:Class ;

#####################
# Identifiable / Unidentifiable
####################

    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Move identifiable true code to ArticleSoftwareLink
	# True if any are true, but that is dealt with later.
	CONSTRUCT {
		?this citec:is_identifiable true .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:identifiable ] ] ;
		} UNION {
			?sel bioj:has_reference ?ref .
			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:identifiable ] ] ;
		} 
	}"""
] ;

    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Move identifiable true code to ArticleSoftwareLink
	# True if any are true, but that is dealt with later.
	CONSTRUCT {
		?this citec:is_identifiable false .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:unidentifiable ] ] ;
		} UNION {
			?sel bioj:has_reference ?ref .
			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:unidentifiable ] ] ;
		}
	}"""
] ;

#####################
# Findable / Unfindable
####################

    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Move findable true code to ArticleSoftwareLink
	CONSTRUCT {
		?this citec:is_findable true .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:findable ] ] ;
		} UNION {
			?sel  bioj:has_reference ?ref .
			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:findable ] ] ;
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Move findable false code to ArticleSoftwareLink

	CONSTRUCT {
		?this citec:is_findable false .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:unfindable ] ] ;
		} UNION {
			?sel  bioj:has_reference ?ref .
			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:unfindable ] ] ;
		}
	}"""
] ;

spin:rule [ rdf:type sp:Construct ;
	sp:text """
	CONSTRUCT {
		?this citec:is_versioned true .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention citec:has_version_indicator true .
	}"""
] ;

    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Move findable true code to ArticleSoftwareLink
	CONSTRUCT {
		?this citec:version_is_findable true .
	}
	WHERE {
		?this rdf:type bioj:ArticleSoftwareLink ;
		      bioj:from_mention ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:findable_version ] ] ;
		} UNION {
			?sel  bioj:has_reference ?ref .
			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:findable_version ] ] ;
		}
	}"""
] ;

    spin:rule [ rdf:type sp:Construct ;
		sp:text """
		# Interpret creator codes. True if any mentions had a creator.
		CONSTRUCT {
			?this citec:is_credited true .
		}
		WHERE {
			?this rdf:type bioj:ArticleSoftwareLink ;
			      bioj:from_mention ?mention .
			?mention citec:has_creator true .
		}"""
	] ;
	
	##############
	# Cites
	##############
    spin:rule [ rdf:type sp:Construct ;
		sp:text """
		# Bring over refs from mentions
		CONSTRUCT {
			?this bioj:includes_reference ?ref ;
			      rdf:type bioj:ReferencedArticleSoftwareLink .
		}
		WHERE {
			?this rdf:type bioj:ArticleSoftwareLink ;
			      bioj:from_mention ?mention .
			?mention bioj:from_selection ?sel .
			?sel bioj:has_reference ?ref .
		}"""
	] ;
.

# bioj:ReferencedArticleSoftwareLink a rdfs:Class ;
#
#     spin:rule [ rdf:type sp:Construct ;
# 		sp:text """
# 		# Bring over matchesPreferredCite.  Again, only needs one.
# 		CONSTRUCT {
# 			?this citec:uses_preferred_cite true .
# 		}
# 		WHERE {
# 			?this rdf:type bioj:ReferencedArticleSoftwareLink ;
# 						      bioj:from_mention ?mention .
# 			?mention bioj:from_selection ?sel .
# 	  		{
# 	  			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:matchesPreferredCite  ] ] ;
# 	  		} UNION {
# 	  			?sel  bioj:has_reference ?ref .
# 	  			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:matchesPreferredCite  ] ] ;
# 	  		}
# 		}"""
# 	] ;
#
#     spin:rule [ rdf:type sp:Construct ;
# 		sp:text """
# 		# Bring over matchesPreferredCite.  This is a check.
# 		CONSTRUCT {
# 			?this citec:includes_preferred_cite false .
# 		}
# 		WHERE {
# 			?this rdf:type bioj:ReferencedArticleSoftwareLink ;
# 			      bioj:from_mention ?mention .
# 			?mention bioj:from_selection ?sel .
# 	  		{
# 	  			?sel 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:missesPreferredCite  ] ] ;
# 	  		} UNION {
# 	  			?sel  bioj:has_reference ?ref .
# 	  			?ref 	ca:isTargetOf   [ ca:appliesCode [ rdf:type citec:missesPreferredCite  ] ] ;
# 	  		}
# 		}"""
# 	] ;
#
# .




bioj:SoftwarePackage a rdfs:Class ;
    spin:rule [ rdf:type sp:Construct ;
	sp:text """
	CONSTRUCT {
		?this rdf:type bioj:SoftwarePackageUsed .
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention citec:has_software_used true .
	}"""
] ;


.

bioj:SoftwarePackageUsed a rdfs:Class ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_accessible true ;
		      citec:is_free       true .
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:access_free ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:access_free ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_accessible true ;
		      citec:is_free       false .
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:access_purchase ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:access_purchase ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_accessible false .
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:no_access ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:no_access ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_source_accessible true
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:source_available ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:source_available ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_source_accessible false
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:source_unavailable ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:source_unavailable ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_explicitly_modifiable true
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:permission_modify ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:permission_modify ] ] .
		}
	}"""
] ;
    bioj:runFirstRule [ rdf:type sp:Construct ;
	sp:text """
	# Interpret software package codes
	CONSTRUCT {
		?this citec:is_explicitly_modifiable false
	}
	WHERE {
		?this rdf:type bioj:SoftwarePackage ;
		      bioj:mentioned_in ?mention .
		?mention bioj:from_selection ?sel .
		{
			?sel ca:isTargetOf [ ca:appliesCode [ rdf:type citec:prohibited_modify ] ] .
		} UNION {
			?sel bioj:has_reference ?ref .
	        ?ref ca:isTargetOf [ ca:appliesCode [ rdf:type citec:prohibited_modify ] ] .
		}
	}"""
] ;

.

